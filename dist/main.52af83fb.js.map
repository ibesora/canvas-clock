{"version":3,"sources":["utils.js","clock-renderer.js","clock.js","main.js"],"names":["create2dCanvas","width","height","canvas","document","createElement","appendCanvasToDOM","body","appendChild","getCurrentTimeInMillis","date","Date","minutesInAnHour","getHours","secondsInAMinute","getMinutes","getSeconds","getMilliseconds","easeInOutCubic","x","Math","pow","ClockRenderer","CanvasMargin","OuterCircleStrokeColor","CenterCircleRadius","CenterCircleLineWidth","CenterCircleStrokeColor","CenterCircleFillColor","HourMarkLength","HourMarkWidth","HourMarkColor","HoursHandleToWatchRadiusRatio","HoursHandleWidth","HoursHandleColor","MinutesMarkLength","MinutesMarkWidth","MinutesMarkColor","MinutesHandleWidth","MinutesHandleToWatchRadiusRatio","MinutesHandleColor","SecondsHandleWidth","SecondsHandleToWatchRadiusRatio","SecondsHandleColor","SecondsTailToWatchRadiusRatio","CangeModeAnimationDurationMillis","backgroundCanvas","clockState","state","ctx","getContext","backgroundCtx","regularModeIcon","getElementById","stopWatchModeIcon","canvasHalfWidth","canvasHalfHeight","circleRadians","PI","changeModeAnimationStart","renderBackgroundToOffscreenCanvas","elementToEnable","clockMode","ClockMode","RegularToStopWatch","elementToDisable","classList","add","remove","renderCirclesToBackgroundCanvas","renderMarksToBackgroundCanvas","renderCircles","clearRect","arc","min","strokeStyle","stroke","beginPath","lineWidth","fillStyle","renderMarks","outerRadius","i","angle","computeCircleAngle","renderMark","index","total","offset","outerStart","length","color","angleSin","sin","angleCos","cos","x1","y1","x2","y2","moveTo","lineTo","step","clear","drawBackground","drawForeground","requestAnimationFrame","frameStep","draw","drawImage","drawHandles","Regular","renderRegularModeHandles","StopWatch","renderStopWatchModeHandles","stopWatchMillis","StopWatchToRegular","renderModeChangeAnimation","ResettingStopWatch","renderResetStopWatch","currentTimeMillis","getRegularModeHandsValuesFromMillis","hoursHandValue","minutesHandValue","secondsHandValue","renderHandles","millis","hours","minutes","seconds","clockRadius","quarterCircleAngle","secondsAngle","minutesAngle","hoursAngle","renderHandle","handleLength","handleWidth","handleColor","tailLength","getStopWatchModeHandsValuesFromMillis","getAnimValues","handsStartValues","handsEndValues","renderAnimationModeHandles","nowInMillis","sourceSecondsHandValue","targetSecondsHandValue","sourceMinutesHandValue","targetMinutesHandValue","sourceHoursHandValue","targetHoursHandValue","rH","rM","rS","sH","sM","sS","millisecondsInADecisecond","animDuration","animProgress","mappedProgress","interpolateValue","progress","startValue","endValue","Clock","isStopWatchRunning","renderer","topButton","middleButton","bottomButton","stopWatchIntervalMillis","stopWatchIntervalId","addEventListeners","addEventListener","pauseStopWatch","startStopWatch","switchModeToStopWatch","switchModeToRegular","switchModeIcons","resetStopWatch","clearInterval","setInterval","increaseMillis","setStopWatchMillis","resetChangeModeAnimation","main","className"],"mappings":"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","file":"main.52af83fb.js","sourceRoot":"../src","sourcesContent":["export const create2dCanvas = (width = 300, height = 300) => {\n  const canvas = document.createElement('canvas')\n  canvas.width = width\n  canvas.height = height\n  return canvas\n}\n\nexport const appendCanvasToDOM = (canvas) => {\n  document.body.appendChild(canvas)\n}\n\nexport const getCurrentTimeInMillis = () => {\n  const date = new Date()\n  const millisInASecond = 1000\n  const secondsInAMinute = 60\n  const minutesInAnHour = 60\n  const millisInAMinute = secondsInAMinute * millisInASecond\n  const millisInAnHour = minutesInAnHour * millisInAMinute\n  return date.getHours() * millisInAnHour\n    + date.getMinutes() * millisInAMinute\n    + date.getSeconds() * millisInASecond\n    + date.getMilliseconds()\n}\n\nexport const easeInOutCubic = (x) => {\n  // This code is from https://easings.net/#easeInOutCubic\n  return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;\n}","import { ClockMode } from './clock'\nimport { getCurrentTimeInMillis, easeInOutCubic } from './utils'\n\n// Configuration options\nconst CanvasMargin = 10\nconst OuterCircleStrokeColor = '#92949C'\nconst CenterCircleRadius = 2\nconst CenterCircleLineWidth = 3\nconst CenterCircleStrokeColor = '#0C3D4A'\nconst CenterCircleFillColor = '#353535'\nconst HourMarkLength = 10\nconst HourMarkWidth = 2\nconst HourMarkColor = '#466B76'\nconst HoursHandleToWatchRadiusRatio = 0.7\nconst HoursHandleWidth = 2\nconst HoursHandleColor = '#000000'\nconst MinutesMarkLength = 5\nconst MinutesMarkWidth = 1\nconst MinutesMarkColor = '#C4D1D5'\nconst MinutesHandleWidth = 0.8\nconst MinutesHandleToWatchRadiusRatio = 0.8\nconst MinutesHandleColor = '#000000'\nconst SecondsHandleWidth = 0.5\nconst SecondsHandleToWatchRadiusRatio = 0.9\nconst SecondsHandleColor = '#ff0000'\nconst SecondsTailToWatchRadiusRatio = 0.1\nconst CangeModeAnimationDurationMillis = 500\n\nclass ClockRenderer {\n  constructor(canvas, backgroundCanvas, clockState) {\n    this.canvas = canvas\n    this.backgroundCanvas = backgroundCanvas\n    this.state = clockState\n    this.ctx = canvas.getContext('2d')\n    this.backgroundCtx = backgroundCanvas.getContext('2d')\n    this.regularModeIcon = document.getElementById('regular-mode-icon')\n    this.stopWatchModeIcon = document.getElementById('stopwatch-mode-icon')\n    this.canvasHalfWidth = canvas.width / 2\n    this.canvasHalfHeight = canvas.height / 2\n    this.circleRadians = Math.PI * 2\n    this.changeModeAnimationStart = 0\n\n    this.renderBackgroundToOffscreenCanvas()\n  }\n\n  switchModeIcons () {\n    const elementToEnable = this.state.clockMode === ClockMode.RegularToStopWatch\n      ? this.stopWatchModeIcon\n      : this.regularModeIcon \n    const elementToDisable = this.state.clockMode === ClockMode.RegularToStopWatch\n      ? this.regularModeIcon\n      : this.stopWatchModeIcon\n    elementToEnable.classList.add(\"active\")\n    elementToDisable.classList.remove(\"active\")\n  }\n\n  renderBackgroundToOffscreenCanvas() {\n    this.renderCirclesToBackgroundCanvas()\n    this.renderMarksToBackgroundCanvas()\n  }\n\n  renderCirclesToBackgroundCanvas() {\n    this.renderCircles(this.backgroundCtx)\n  }\n\n  renderCircles(ctx) {\n    ctx.clearRect(0, 0, this.backgroundCanvas.width, this.backgroundCanvas.height)\n    ctx.arc(this.canvasHalfWidth, this.canvasHalfHeight, Math.min(this.canvasHalfWidth,\n      this.canvasHalfHeight) - CanvasMargin, 0, this.circleRadians)\n    ctx.strokeStyle = OuterCircleStrokeColor\n    ctx.stroke()\n    ctx.beginPath()\n    ctx.arc(this.canvasHalfWidth, this.canvasHalfHeight, CenterCircleRadius, 0, this.circleRadians)\n    ctx.lineWidth = CenterCircleLineWidth\n    ctx.fillStyle = CenterCircleFillColor\n    ctx.strokeStyle = CenterCircleStrokeColor\n    ctx.stroke()\n  }\n\n  renderMarksToBackgroundCanvas() {\n    this.renderMarks(this.backgroundCtx)\n  }\n\n  renderMarks(ctx) {\n    const outerRadius = Math.min(this.canvasHalfWidth, this.canvasHalfHeight) - CanvasMargin\n    for (let i = 0; i < 60; ++i) {\n      if (i % 5 === 0) {\n        const angle = this.computeCircleAngle(i, 12)\n        this.renderMark(ctx, angle, outerRadius, HourMarkLength, HourMarkWidth, HourMarkColor)\n      } else {\n        const angle = this.computeCircleAngle(i, 60)\n        this.renderMark(ctx, angle, outerRadius, MinutesMarkLength, MinutesMarkWidth,\n          MinutesMarkColor)\n      }\n    }\n  }\n\n  computeCircleAngle(index, total, offset = 0) {\n    return (this.circleRadians * (index / total)) - offset\n  }\n\n  renderMark(ctx, angle, outerStart, length, lineWidth, color) {\n    const angleSin = Math.sin(angle)\n    const angleCos = Math.cos(angle)\n    const x1 = this.canvasHalfWidth + angleCos * outerStart\n    const y1 = this.canvasHalfHeight + angleSin * outerStart\n    const x2 = this.canvasHalfWidth + angleCos * (outerStart - length)\n    const y2 = this.canvasHalfHeight + angleSin * (outerStart - length)\n\n    ctx.lineWidth = lineWidth\n    ctx.beginPath()\n    ctx.moveTo(x1, y1)\n    ctx.lineTo(x2, y2)\n    ctx.strokeStyle = color\n    ctx.stroke()\n  }\n\n  draw(step) {\n    this.clear()\n    this.drawBackground()\n    this.drawForeground(step)\n    requestAnimationFrame((frameStep) => this.draw(frameStep))\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n  }\n\n  drawBackground() {\n    this.ctx.drawImage(this.backgroundCanvas, 0, 0)\n  }\n\n  drawForeground(step) {\n    this.drawHandles(step)\n  }\n\n  drawHandles(step) {\n    if (this.state.clockMode === ClockMode.Regular) {\n      this.renderRegularModeHandles()\n    }\n    else if (this.state.clockMode === ClockMode.StopWatch) this.renderStopWatchModeHandles(this.state.stopWatchMillis)\n    else if (this.state.clockMode === ClockMode.RegularToStopWatch || this.state.clockMode === ClockMode.StopWatchToRegular) this.renderModeChangeAnimation(step)\n    else if (this.state.clockMode === ClockMode.ResettingStopWatch) this.renderResetStopWatch(step)\n  }\n\n  renderRegularModeHandles() {\n    const currentTimeMillis = getCurrentTimeInMillis()\n    const {\n      hoursHandValue,\n      minutesHandValue,\n      secondsHandValue\n    } = this.getRegularModeHandsValuesFromMillis(currentTimeMillis)\n    this.renderHandles(hoursHandValue, minutesHandValue, secondsHandValue)\n  }\n\n  getRegularModeHandsValuesFromMillis(millis) {\n    // In regular mode the hour, minute and second hands\n    // are the hour, minute and seconds values\n    const minutesInAnHour = 60\n    const secondsInAMinute = 60\n    const secondsInAnHour = minutesInAnHour * secondsInAMinute\n    const millisInASecond = 1000\n    let secondsHandValue = millis / millisInASecond\n    const hoursHandValue = secondsHandValue / secondsInAnHour\n    secondsHandValue %= secondsInAnHour\n    const minutesHandValue = secondsHandValue / secondsInAMinute\n    secondsHandValue %= secondsInAMinute\n    return { hoursHandValue, minutesHandValue, secondsHandValue }\n  }\n\n  renderHandles(hours, minutes, seconds) {\n    const clockRadius = this.canvasHalfWidth\n    const quarterCircleAngle = this.circleRadians / 4\n    const secondsAngle = this.computeCircleAngle(seconds, 60, quarterCircleAngle)\n    const minutesAngle = this.computeCircleAngle(minutes, 60, quarterCircleAngle)\n    const hoursAngle = this.computeCircleAngle(hours, 12, quarterCircleAngle)\n    this.renderHandle(secondsAngle, clockRadius * SecondsHandleToWatchRadiusRatio,\n      SecondsHandleWidth, SecondsHandleColor, clockRadius * SecondsTailToWatchRadiusRatio)\n    this.renderHandle(minutesAngle, clockRadius * MinutesHandleToWatchRadiusRatio,\n      MinutesHandleWidth, MinutesHandleColor)\n    this.renderHandle(hoursAngle, clockRadius * HoursHandleToWatchRadiusRatio,\n      HoursHandleWidth, HoursHandleColor)\n  }\n\n  renderHandle(angle, handleLength, handleWidth, handleColor, tailLength = 0) {\n    const angleSin = Math.sin(angle)\n    const angleCos = Math.cos(angle)\n    this.ctx.lineWidth = handleWidth\n    this.ctx.beginPath()\n    this.ctx.moveTo(this.canvasHalfWidth, this.canvasHalfHeight)\n    this.ctx.lineTo((this.canvasHalfWidth + angleCos * handleLength),\n      this.canvasHalfHeight + angleSin * handleLength)\n    this.ctx.moveTo(this.canvasHalfWidth, this.canvasHalfHeight)\n    this.ctx.lineTo((this.canvasHalfWidth - angleCos * tailLength),\n      this.canvasHalfHeight - angleSin * tailLength)\n    this.ctx.strokeStyle = handleColor\n    this.ctx.stroke()\n  }\n\n  renderStopWatchModeHandles (millis) { \n    const { hoursHandValue, minutesHandValue, secondsHandValue } = this.getStopWatchModeHandsValuesFromMillis(millis)\n    this.renderHandles(hoursHandValue, minutesHandValue, secondsHandValue)\n  }\n\n  renderModeChangeAnimation (step) {\n    if (this.changeModeAnimationStart === 0) this.changeModeAnimationStart = step\n    else {\n      const { handsStartValues, handsEndValues } = this.getAnimValues()\n      const shouldEndAnimation = this.renderAnimationModeHandles(step, handsStartValues, handsEndValues)\n      if (shouldEndAnimation) {\n        if(this.state.clockMode === ClockMode.RegularToStopWatch) this.state.clockMode = ClockMode.StopWatch\n        else if (this.state.clockMode === ClockMode.StopWatchToRegular) this.state.clockMode = ClockMode.Regular\n      }\n    }\n  }\n\n  getAnimValues () {\n    const nowInMillis = getCurrentTimeInMillis()\n    const { hoursHandValue: rH, minutesHandValue: rM, secondsHandValue: rS } = this.getRegularModeHandsValuesFromMillis(nowInMillis)\n    const { hoursHandValue: sH, minutesHandValue: sM, secondsHandValue: sS } = this.getStopWatchModeHandsValuesFromMillis(this.state.stopWatchMillis)\n    let sourceSecondsHandValue, targetSecondsHandValue\n    let sourceMinutesHandValue, targetMinutesHandValue\n    let sourceHoursHandValue, targetHoursHandValue\n    if (this.state.clockMode === ClockMode.RegularToStopWatch) {\n      sourceSecondsHandValue = rS; sourceMinutesHandValue = rM; sourceHoursHandValue = rH\n      targetSecondsHandValue = sS; targetMinutesHandValue = sM; targetHoursHandValue = sH\n    } else {\n      sourceSecondsHandValue = sS; sourceMinutesHandValue = sM; sourceHoursHandValue = sH\n      targetSecondsHandValue = rS; targetMinutesHandValue = rM; targetHoursHandValue = rH\n    }\n    // If the target value is less than the source one, we add the needed amount\n    // We don't want our clock hands going backward!\n    targetSecondsHandValue = targetSecondsHandValue < sourceSecondsHandValue ? targetSecondsHandValue + 60 : targetSecondsHandValue\n    targetMinutesHandValue = targetMinutesHandValue < sourceMinutesHandValue ? targetMinutesHandValue + 60 : targetMinutesHandValue\n    targetHoursHandValue = targetHoursHandValue % 12\n    targetHoursHandValue = targetHoursHandValue < sourceHoursHandValue ? sourceHoursHandValue < 12 ? targetHoursHandValue + 12 : targetHoursHandValue + 24 : targetHoursHandValue\n    return {\n      handsStartValues: {\n        hours: sourceHoursHandValue,\n        minutes: sourceMinutesHandValue,\n        seconds: sourceSecondsHandValue\n      },\n      handsEndValues: {\n        hours: targetHoursHandValue,\n        minutes: targetMinutesHandValue,\n        seconds: targetSecondsHandValue\n      }\n    }\n  }\n\n  getStopWatchModeHandsValuesFromMillis (millis) {\n    // In stopwatch mode the hour, minute and second hands\n    // are the minute, seconds and deciseconds values\n    // This means we need to account for differences between\n    // angles i.e. a whole lap of the seconds hand should be\n    // 10 deciseconds instead of 60 seconds. Similarly, a whole lap of the hour hand\n    // should be 60 seconds instead of 12 hours\n    const millisecondsInADecisecond = 100\n    const decisecondsToSecondsAngleMapping = 60 / 10\n    const minutesToHoursAngleMapping = 60 / 12\n    const secondsHandValue = ((millis / millisecondsInADecisecond) * decisecondsToSecondsAngleMapping) % 60\n    const { minutesHandValue, secondsHandValue: secondsValue } = this.getRegularModeHandsValuesFromMillis(millis)\n    return { hoursHandValue: minutesHandValue / minutesToHoursAngleMapping, minutesHandValue: secondsValue, secondsHandValue}\n  }\n\n  renderAnimationModeHandles(step, handsStartValues, handsEndValues) {\n    const animDuration = step - this.changeModeAnimationStart\n    const animProgress = animDuration / CangeModeAnimationDurationMillis\n    if (animProgress >= 1) return true\n    else {\n      const mappedProgress = easeInOutCubic(animProgress)\n      const hoursHandValue = this.interpolateValue(mappedProgress, handsStartValues.hours, handsEndValues.hours)      \n      const minutesHandValue = this.interpolateValue(mappedProgress, handsStartValues.minutes, handsEndValues.minutes)      \n      const secondsHandValue = this.interpolateValue(mappedProgress, handsStartValues.seconds, handsEndValues.seconds)\n      this.renderHandles(hoursHandValue, minutesHandValue, secondsHandValue)\n    }\n    return false\n  }\n\n  interpolateValue(progress, startValue, endValue) {\n    return startValue + (endValue - startValue) * progress\n  }\n\n  renderResetStopWatch (step) {\n    if (this.changeModeAnimationStart === 0) this.changeModeAnimationStart = step\n    else {\n      const { hoursHandValue: sH, minutesHandValue: sM, secondsHandValue: sS } = this.getStopWatchModeHandsValuesFromMillis(this.state.stopWatchMillis)\n      const handsStartValues = { hours: sH % 60, minutes: sM % 60, seconds: sS % 60 }\n      const handsEndValues = this.state.stopWatchMillis === 0 ? { hours: 0, minutes: 0, seconds: 0} : { hours: 12, minutes: 60, seconds: 60 }\n      const shouldEndAnimation = this.renderAnimationModeHandles(step, handsStartValues, handsEndValues)\n      if (shouldEndAnimation) {\n        this.state.clockMode = ClockMode.StopWatch\n        this.state.stopWatchMillis = 0\n      }\n    }\n  }\n  \n  resetChangeModeAnimation() {\n    this.changeModeAnimationStart = 0\n  }\n\n}\n\nexport default ClockRenderer","import ClockRenderer from './clock-renderer'\n\nexport const ClockMode = {\n  Regular: 0,\n  StopWatch: 1,\n  StopWatchToRegular: 2,\n  RegularToStopWatch: 3,\n  ResettingStopWatch: 4\n}\n\nclass Clock {\n  constructor(canvas, backgroundCanvas) {\n    this.state = {\n      clockMode: ClockMode.Regular,\n      stopWatchMillis: 0,\n      isStopWatchRunning: false\n    }\n    this.renderer = new ClockRenderer(canvas, backgroundCanvas, this.state)\n    this.topButton = document.getElementById('top-button')\n    this.middleButton = document.getElementById('middle-button')\n    this.bottomButton = document.getElementById('bottom-button')\n    this.stopWatchIntervalMillis = 10\n    this.stopWatchIntervalId = null\n\n    this.addEventListeners()\n  }\n\n  addEventListeners() {\n    this.topButton.addEventListener('click', () => {\n      if (this.state.clockMode === ClockMode.StopWatch && this.state.isStopWatchRunning) this.pauseStopWatch()\n      else if (this.state.clockMode === ClockMode.StopWatch && !this.state.isStopWatchRunning) this.startStopWatch()\n    })\n    this.middleButton.addEventListener('click', () => {\n      if (this.state.clockMode === ClockMode.Regular) this.switchModeToStopWatch()\n      else if (this.state.clockMode === ClockMode.StopWatch) this.switchModeToRegular()\n      this.renderer.switchModeIcons()\n    })\n    this.bottomButton.addEventListener('click', () => {\n      if (this.state.clockMode === ClockMode.StopWatch) {\n        this.resetStopWatch()\n      }\n    })\n  }\n\n  pauseStopWatch () {\n    this.state.isStopWatchRunning = false\n    clearInterval(this.stopWatchIntervalId)\n  }\n\n  startStopWatch () {\n    this.state.isStopWatchRunning = true\n    this.stopWatchIntervalId = setInterval(() => this.increaseMillis(), this.stopWatchIntervalMillis)\n  }\n\n  increaseMillis () {\n    this.state.stopWatchMillis += this.stopWatchIntervalMillis\n    this.renderer.setStopWatchMillis(this.stopWatchMillis)\n  }\n\n  resetStopWatch () {\n    this.pauseStopWatch()\n    this.state.clockMode = ClockMode.ResettingStopWatch\n    this.renderer.resetChangeModeAnimation()\n  }\n\n  switchModeToStopWatch () {\n    this.state.clockMode = ClockMode.RegularToStopWatch\n    this.renderer.resetChangeModeAnimation()\n  }\n\n  switchModeToRegular () {\n    this.state.clockMode = ClockMode.StopWatchToRegular\n    this.renderer.resetChangeModeAnimation()\n  }\n\n  draw () {\n    this.renderer.draw()\n  }\n\n}\n\nexport default Clock","import Clock from './clock'\nimport { create2dCanvas, appendCanvasToDOM } from './utils'\n\nconst main = () => {\n  const canvas = create2dCanvas()\n  canvas.className = 'main-canvas'\n  const backgroundCanvas = create2dCanvas()\n  appendCanvasToDOM(canvas)\n  const clock = new Clock(canvas, backgroundCanvas)\n  clock.draw()\n}\n\nmain()\n"]}